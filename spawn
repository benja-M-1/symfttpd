#!/usr/bin/env php
<?php
/**
 * @author Laurent Bachelier <laurent@bachelier.name>
 */
require dirname(__FILE__).'/lib/bootstrap.php';
require dirname(__FILE__).'/lib/Argument.php';
require dirname(__FILE__).'/lib/Template.php';
require dirname(__FILE__).'/lib/FileTools.php';
require dirname(__FILE__).'/lib/PosixTools.php';
require dirname(__FILE__).'/lib/MultiConfig.php';
require dirname(__FILE__).'/lib/Symfony.php';
require dirname(__FILE__).'/lib/Tail.php';

$project_path = Symfony::getProjectPath();
$options = MultiConfig::get();

$options['port'] = intval(Argument::get('p', 'port', 4042));
$options['bind'] = Argument::get('A', 'all', false)
                 ? false
                 : Argument::get('b', 'bind', '127.0.0.1');
$options['project_path'] = $project_path;
$options['config_dir'] = $project_path.'/cache/lighttpd';
$options['log_dir'] = $project_path.'/log/lighttpd';
// hack: .sf files are not removed by symfony cc
$options['pidfile'] = $options['config_dir'].'/.sf';
$options['restartfile'] = $options['config_dir'].'/.symfttpd_restart';
$options['tail'] = Argument::get('t', 'tail', false);
$options['fork'] = !Argument::get('s', '--single-process', false);
if ($options['fork'] && !function_exists('pcntl_fork'))
{
  log_message('Warning: No fork() support.'
      . 'symfttpd will run in single-process mode.');
  $options['fork'] = false;
}

if (Argument::get('K', 'kill', false))
{
  if (file_exists($options['restartfile']))
  {
    unlink($options['restartfile']);
  }
  exit(!PosixTools::killPid($options['pidfile']));
}

FileTools::mkdirs($options['config_dir']);
FileTools::mkdirs($options['log_dir']);

PosixTools::setCustomPath($options['custom_path']);
try
{
  if (empty($options['lighttpd_cmd']))
  {
    $options['lighttpd_cmd'] = PosixTools::which('lighttpd');
  }

  if (empty($options['php_cgi_cmd']))
  {
    $options['php_cgi_cmd'] = PosixTools::which('php-cgi');
  }

  if (empty($options['php_cmd']))
  {
    $options['php_cmd'] = PosixTools::which('php');
  }
}
catch (ExecutableNotFoundError $e)
{
  log_message("Required executable not found.", false);
  log_message($e->getMessage()
    . ' not found in the specified paths: '
    . implode(', ', PosixTools::getPaths()), false);
  exit(1);
}

$config_file = $options['config_dir'].'/lighttpd.conf';
file_put_contents(
  $config_file,
  Template::get($options['config_template'], $options)
);

// Pretty information. Nothing interesting code-wise.
log_message('lighttpd started on '
  . (strlen($options['bind']) ? $options['bind'] : 'all interfaces')
  . ', port '.$options['port'].'.');
log_message("\nAvailable applications");
$apps = array();
foreach (new DirectoryIterator($project_path.'/web') as $file)
{
  if ($file->isFile() && preg_match('/\.php$/', $file->getFilename()))
  {
    $apps[] = $file->getFilename();
  }
}
$host = in_array($options['bind'], array(false, '0.0.0.0', '::'), true)
      ? 'localhost'
      : $options['bind'];
sort($apps);
foreach ($apps as $app)
{
  log_message(' http://'.$host.':'.$options['port'].'/'.$app);
}
log_message("\nPress Ctrl+C to stop serving.");
flush();

if (!$options['fork'])
{
  passthru($options['lighttpd_cmd'].' -D -f '.escapeshellarg($config_file));
  log_message('Terminated.');
}
else
{
  if ($options['tail'])
  {
    $multitail = new MultiTail();
    $multitail->add('lighttpd-access', new Tail($project_path.'/log/lighttpd/access.log'));
    $multitail->add('lighttpd-error', new Tail($project_path.'/log/lighttpd/error.log'));
    // We have to do it before the fork to capture the startup messages
    $multitail->consume();
  }
  $pid = pcntl_fork();
  if ($pid)
  {
    // Parent process
    $prev_genconf = null;
    while (false !== sleep(1))
    {
      $handle = popen($options['php_cmd'].' '.$project_path.'/config/lighttpd.php', 'r');
      $genconf = stream_get_contents($handle);
      pclose($handle);
      if ($prev_genconf !== null && $prev_genconf !== $genconf)
      {
        touch($options['restartfile']);
        !PosixTools::killPid($options['pidfile']);
      }
      $prev_genconf = $genconf;

      if ($options['tail'])
      {
        $multitail->consume();
      }

      // If the children is defunct, we are finished here
      if (pcntl_waitpid($pid, $status, WNOHANG))
      {
        exit(0);
      }
    }
  }
  elseif ($pid == 0)
  {
    // Child process
    do
    {
      if (file_exists($options['restartfile']))
      {
        unlink($options['restartfile']);
      }
      passthru($options['lighttpd_cmd'].' -D -f '.escapeshellarg($config_file));
      if (!file_exists($options['restartfile']))
      {
        log_message('Terminated.');
      }
      else
      {
        log_message('Something in web/ changed. Restarting lighttpd.');
      }
    } while (file_exists($options['restartfile']));
  }
  else
  {
    log_message('Unable to fork!', true);
    exit(1);
  }
}
